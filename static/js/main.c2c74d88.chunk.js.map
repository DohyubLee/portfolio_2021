{"version":3,"sources":["pages/Home.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["Home","Header","useState","navActive","setNavActive","isSearchBar","setIsSearchBar","isTabletOrMobile","useMediaQuery","query","inputRef","useRef","mobNavRef","navIcRef","openMobNav","setOpenMobNav","useEffect","current","focus","window","addEventListener","changeNavBackColor","closeMobNav","console","log","event","contains","target","scrollY","className","to","ref","onClick","isActive","onFocus","onBlur","App","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.c2c74d88.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div>\r\n      <h3> Home3</h3>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { useMediaQuery } from 'react-responsive';\r\nimport './Header.scss';\r\n\r\nconst Header = () => {\r\n  const [navActive, setNavActive] = useState(false);\r\n  const [isSearchBar, setIsSearchBar] = useState(false);\r\n  const isTabletOrMobile = useMediaQuery({ query: '(max-width: 767px)' });\r\n  const inputRef = useRef();\r\n  const mobNavRef = useRef();\r\n  const navIcRef = useRef();\r\n  const [openMobNav, setOpenMobNav] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (isSearchBar === true) {\r\n      inputRef.current.focus();\r\n    }\r\n  }, [isSearchBar]);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('scroll', changeNavBackColor);\r\n    window.addEventListener('mousedown', closeMobNav);\r\n\r\n    return () => {\r\n      console.log('이 컴포넌트 사라질때');\r\n    };\r\n  }, []);\r\n\r\n  const closeMobNav = event => {\r\n    if (!!mobNavRef.current) {\r\n      // 해당 박스 존재유무 파악\r\n      if (!mobNavRef.current.contains(event.target)) {\r\n        // 해당 박스 영역 외에서 클릭했을시\r\n        if (!navIcRef.current.contains(event.target)) {\r\n          // 아이콘 영역 외에서만 동작시키기위해\r\n          setOpenMobNav(false);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const changeNavBackColor = () => {\r\n    if (window.scrollY > 0) {\r\n      setNavActive(true);\r\n    } else {\r\n      setNavActive(false);\r\n    }\r\n  };\r\n\r\n  const OpenSearchBar = () => {\r\n    setIsSearchBar(!isSearchBar);\r\n  };\r\n\r\n  const OnFocus = () => {\r\n    console.log('OnFocus');\r\n  };\r\n\r\n  const OnBlurSearchBar = () => {\r\n    console.log('OnBlur');\r\n    setIsSearchBar(false);\r\n  };\r\n\r\n  const OpenMobNavSelect = () => {\r\n    setOpenMobNav(!openMobNav);\r\n  };\r\n\r\n  return (\r\n    <header className={navActive ? 'header-back-color' : ''}>\r\n      <nav className=\"App-header\">\r\n        <div className=\"left-wrap\">\r\n          <Link to=\"/\">\r\n            <i className=\"fas fa-video\"></i>\r\n          </Link>\r\n          {isTabletOrMobile ? (\r\n            <div className=\"menu-wrap\" ref={navIcRef}>\r\n              <button onClick={OpenMobNavSelect} className=\"ic-btn\">\r\n                <i className=\"fas fa-bars fa-lg\"></i>\r\n              </button>\r\n            </div>\r\n          ) : (\r\n            <ul>\r\n              <li>\r\n                <NavLink\r\n                  to=\"/now-playing\"\r\n                  className={({ isActive }) => (isActive ? 'active' : 'nav-tab')}\r\n                >\r\n                  now-playing\r\n                </NavLink>\r\n              </li>\r\n              <li>\r\n                <NavLink\r\n                  to=\"/popular\"\r\n                  className={({ isActive }) => (isActive ? 'active' : 'nav-tab')}\r\n                >\r\n                  popular\r\n                </NavLink>\r\n              </li>\r\n              <li>\r\n                <NavLink\r\n                  to=\"/upcoming\"\r\n                  className={({ isActive }) => (isActive ? 'active' : 'nav-tab')}\r\n                >\r\n                  upcoming\r\n                </NavLink>\r\n              </li>\r\n            </ul>\r\n          )}\r\n        </div>\r\n        <div className=\"right-wrap\">\r\n          <div className=\"search-wrap\">\r\n            <div className={isSearchBar ? 'search-bar active' : 'search-bar'}>\r\n              <button onClick={OpenSearchBar} className=\"toggle-btn\">\r\n                <i className=\"fas fa-search\"></i>\r\n              </button>\r\n              <form>\r\n                <input onFocus={OnFocus} onBlur={OnBlurSearchBar} ref={inputRef} />\r\n              </form>\r\n            </div>\r\n          </div>\r\n          <Link to=\"/my-list\" className=\"my-list\">\r\n            <i className=\"fas fa-heart fa-lg\"></i>\r\n          </Link>\r\n        </div>\r\n        {isTabletOrMobile && openMobNav && (\r\n          <div ref={mobNavRef} className=\"mob-nav-wrap\">\r\n            <ul>\r\n              <li>\r\n                <NavLink\r\n                  to=\"/now-playing\"\r\n                  className={({ isActive }) => (isActive ? 'active' : 'nav-tab')}\r\n                >\r\n                  now-playing\r\n                </NavLink>\r\n              </li>\r\n              <li>\r\n                <NavLink\r\n                  to=\"/popular\"\r\n                  className={({ isActive }) => (isActive ? 'active' : 'nav-tab')}\r\n                >\r\n                  popular\r\n                </NavLink>\r\n              </li>\r\n              <li>\r\n                <NavLink\r\n                  to=\"/upcoming\"\r\n                  className={({ isActive }) => (isActive ? 'active' : 'nav-tab')}\r\n                >\r\n                  upcoming\r\n                </NavLink>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        )}\r\n      </nav>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import './App.scss';\r\nimport { Routes, Route } from 'react-router-dom';\r\nimport Home from './pages/Home';\r\nimport Header from './components/Header';\r\nimport { useEffect, useState } from 'react';\r\n\r\nfunction App() {\r\n  const api_key = 'dfebf9cfca6fde7ded33adb1b64575ab';\r\n  const [config, setConfig] = useState();\r\n\r\n  useEffect(() => {\r\n    console.log('testddd');\r\n  }, []);\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <div className=\"box\">1111</div>\r\n      <Routes>\r\n        <Route path=\"/\" element={<Home />} />\r\n        <Route path=\"now-playing\" element={<h3>now-playing</h3>} />\r\n        <Route path=\"popular\" element={<h3>popular11</h3>} />\r\n        <Route path=\"upcoming\" element={<h3>upcoming</h3>} />\r\n        <Route path=\"my-list\" element={<h3>upcoming</h3>} />\r\n      </Routes>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    {/* PUBLIC_URL은 /portfolio_2021을 의미 */}\r\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n      <App />\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}